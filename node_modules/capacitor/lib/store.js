(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['signals', 'action', 'dispatcher', 'invariant'], function(_arg, Action, dispatcher, invariant) {
    var Signal, Store;
    Signal = _arg.Signal;

    /*
     *  implementation example:
     *
     *  class TodoStore extends Store
     *    actions: [
     *      someAction, () ->
     *        @doStuff()
     *        @doOtherStuff()
     *        @profit()
     *    ]
     *
     *    doStuff: () ->
     *      # Do things..
     *
     *
     *    doOtherStuff: () ->
     *      # Do things..
     *
     *    profit: () ->
     *      # Do things..
     *      @changed.dispatch()
     */
    return Store = (function() {

      /*
       * Constructor function that sets up actions and events on the store
       */
      function Store() {
        this._handleAction = __bind(this._handleAction, this);
        var action, i, _i, _len, _ref, _ref1;
        dispatcher.register(this);
        this._handlers = [];
        invariant(((_ref = this.actions) != null ? _ref.length : void 0) > 1, "Actions array should be an array of actions and handlers");
        _ref1 = this.actions;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = _i += 2) {
          action = _ref1[i];
          invariant(action instanceof Action && typeof this.actions[i + 1] === "function", "Action array is malformed: every second argument should be a function\nand follow and instance of Action.");
          invariant(this._handlers[action] == null, "You can only define one handler pr action");
          this._handlers[action] = this.actions[i + 1];
        }
        this.changed = new Signal;
        if (typeof this.initialize === "function") {
          this.initialize();
        }
      }


      /*
       * Method for calling handlers on the store when an action is executed.
       * 
       * @param {string} actionName The name of the executed action
       * @param {mixed} payload The payload passed to the handler
       * @param {array} waitFor An array of other signals to wait for in this dispatcher run.
       */

      Store.prototype._handleAction = function(actionName, payload, waitFor) {
        invariant(this._handlers[actionName], "Store has no handler associated with " + actionName);
        return this._handlers[actionName].call(this, payload, waitFor);
      };

      return Store;

    })();
  });

}).call(this);
