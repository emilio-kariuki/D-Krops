(function() {
  var __hasProp = {}.hasOwnProperty;

  define(['invariant', 'dispatcher', 'action'], function(invariant, dispatcher, Action) {
    var ActionManager;
    ActionManager = (function() {

      /*
       * @var {Object} actions a list of all existing actions
       * @private
       */
      var actions;

      function ActionManager() {}

      actions = {};


      /*
       * Method for creating an action
       *
       * @param {string} name The (unique) name of the action.
       * @return {Action} the created action.
       */

      ActionManager.prototype.create = function(name) {
        invariant(!actions[name], "Action names are unique. An action with the name " + name + " already exists.");
        actions[name] = new Action(name);
        return actions[name];
      };


      /*
       * Method for listing all existing actions
       *
       * @return {Array} list of existing actions
       */

      ActionManager.prototype.list = function() {
        var name, _results;
        _results = [];
        for (name in actions) {
          if (!__hasProp.call(actions, name)) continue;
          _results.push(name);
        }
        return _results;
      };


      /*
       * Method to check if an action exists
       *
       * @return {boolean}
       */

      ActionManager.prototype.exists = function(name) {
        return actions[name] != null;
      };

      return ActionManager;

    })();
    return new ActionManager;
  });

}).call(this);
